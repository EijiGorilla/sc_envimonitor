"use strict";(self.webpackChunksc_envimonitor=self.webpackChunksc_envimonitor||[]).push([[54],{70054:(e,t,o)=>{o.r(t),o.d(t,{default:()=>E});var r=o(9236),i=o(27366),l=o(42265),s=o(76200),n=(o(51508),o(97642)),a=o(66978),y=o(35995),p=o(49861),u=(o(93169),o(32718),o(84936),o(38511)),d=o(69912),h=o(53866),c=o(92975),v=o(30651),S=o(6693),m=o(6061),b=o(29598),f=o(71684),g=o(56811),C=o(70361),_=o(22061),k=o(16851),G=o(91946),Z=o(16072),w=o(61459);const R=["atom","xml"],P={base:_.Z,key:"type",typeMap:{"simple-line":k.Z},errorContext:"symbol"},x={base:_.Z,key:"type",typeMap:{"picture-marker":G.Z,"simple-marker":Z.Z},errorContext:"symbol"},j={base:_.Z,key:"type",typeMap:{"simple-fill":w.Z},errorContext:"symbol"};let F=class extends((0,S.h7)((0,f.Q)((0,m.q)((0,b.I)((0,g.M)((0,n.R)(v.Z))))))){constructor(){super(...arguments),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?(0,r.Z)({url:e},t):e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{var t;const o=e.layerDefinition.drawingInfo.renderer.symbol;o&&"esriSFS"===o.type&&(null===(t=o.outline)||void 0===t?void 0:t.style.includes("esriSFS"))&&(o.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?(0,y.vt)(this.url,R)||"GeoRSS":e}set title(e){this._set("title",e)}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(a.r9).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){var t;const o=this.spatialReference,{data:r}=await(0,s.Z)(l.default.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:(0,c.oR)(o)?void 0:null!==(t=o.wkid)&&void 0!==t?t:JSON.stringify(o)},signal:e});return r}_hasGeometry(e){var t,o;return null!==(t=null===(o=this.featureCollections)||void 0===o?void 0:o.some((t=>{var o,r;return(null===(o=t.featureSet)||void 0===o?void 0:o.geometryType)===e&&(null===(r=t.featureSet.features)||void 0===r?void 0:r.length)>0})))&&void 0!==t&&t}};(0,i._)([(0,p.Cb)()],F.prototype,"description",void 0),(0,i._)([(0,p.Cb)()],F.prototype,"featureCollections",void 0),(0,i._)([(0,u.r)("service","featureCollections",["featureCollection.layers"])],F.prototype,"readFeatureCollections",null),(0,i._)([(0,p.Cb)({type:h.Z,json:{name:"lookAtExtent"}})],F.prototype,"fullExtent",void 0),(0,i._)([(0,p.Cb)(C.id)],F.prototype,"id",void 0),(0,i._)([(0,p.Cb)(C.rn)],F.prototype,"legendEnabled",void 0),(0,i._)([(0,p.Cb)({types:P,json:{write:!0}})],F.prototype,"lineSymbol",void 0),(0,i._)([(0,p.Cb)({type:["show","hide"]})],F.prototype,"listMode",void 0),(0,i._)([(0,p.Cb)({types:x,json:{write:!0}})],F.prototype,"pointSymbol",void 0),(0,i._)([(0,p.Cb)({types:j,json:{write:!0}})],F.prototype,"polygonSymbol",void 0),(0,i._)([(0,p.Cb)({type:["GeoRSS"]})],F.prototype,"operationalLayerType",void 0),(0,i._)([(0,p.Cb)(C.HQ)],F.prototype,"url",void 0),(0,i._)([(0,p.Cb)({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],F.prototype,"title",null),(0,i._)([(0,p.Cb)({readOnly:!0,json:{read:!1},value:"geo-rss"})],F.prototype,"type",void 0),F=(0,i._)([(0,d.j)("esri.layers.GeoRSSLayer")],F);const E=F}}]);
//# sourceMappingURL=54.b8e15a5c.chunk.js.map