{"version":3,"file":"static/js/1726.62d9a4fa.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/core/node_modules/@esri/calcite-components/dist/components/src/components/action-group/resources.ts","../node_modules/@arcgis/core/node_modules/@esri/calcite-components/dist/components/src/components/action-group/action-group.tsx","../node_modules/@arcgis/core/node_modules/@esri/calcite-components/dist/components/src/components/action-group/action-group.scss?tag=calcite-action-group&encapsulation=shadow","../node_modules/@arcgis/core/node_modules/@esri/calcite-components/dist/components/src/utils/array.ts","../node_modules/@arcgis/core/node_modules/@esri/calcite-components/dist/components/src/components/action-menu/resources.ts","../node_modules/@arcgis/core/node_modules/@esri/calcite-components/dist/components/src/components/action-menu/action-menu.tsx","../node_modules/@arcgis/core/node_modules/@esri/calcite-components/dist/components/src/components/action-menu/action-menu.scss?tag=calcite-action-menu&encapsulation=shadow","../node_modules/@arcgis/core/node_modules/@esri/calcite-components/dist/components/src/utils/conditionalSlot.ts"],"sourcesContent":["export const SLOTS = {\n  menuActions: \"menu-actions\",\n  menuTooltip: \"menu-tooltip\",\n};\n\nexport const ICONS = {\n  menu: \"ellipsis\",\n} as const;\n\nexport const CSS = {\n  container: \"container\",\n};\n","import { Component, Element, h, Method, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { CalciteActionMenuCustomEvent } from \"../../components\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { SLOTS as ACTION_MENU_SLOTS } from \"../action-menu/resources\";\nimport { Layout, Scale } from \"../interfaces\";\nimport { FlipPlacement, LogicalPlacement, OverlayPositioning } from \"../../utils/floating-ui\";\nimport { slotChangeHasAssignedElement } from \"../../utils/dom\";\nimport { Columns } from \"./interfaces\";\nimport { ActionGroupMessages } from \"./assets/action-group/t9n\";\nimport { ICONS, SLOTS, CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding a group of `calcite-action`s.\n * @slot menu-actions - A slot for adding an overflow menu with `calcite-action`s inside a `calcite-dropdown`.\n * @slot menu-tooltip - A slot for adding a `calcite-tooltip` for the menu.\n */\n@Component({\n  tag: \"calcite-action-group\",\n  styleUrl: \"action-group.scss\",\n  shadow: {\n    delegatesFocus: true,\n  },\n  assetsDirs: [\"assets\"],\n})\nexport class ActionGroup\n  implements ConditionalSlotComponent, LoadableComponent, LocalizedComponent, T9nComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is expanded.\n   */\n  @Prop({ reflect: true }) expanded = false;\n\n  @Watch(\"expanded\")\n  expandedHandler(): void {\n    this.menuOpen = false;\n  }\n\n  /**\n   *  Accessible name for the component.\n   */\n  @Prop() label: string;\n\n  /**\n   * Indicates the layout of the component.\n   *\n   * @deprecated Use the `layout` property on the component's parent instead.\n   */\n  @Prop({ reflect: true }) layout: Extract<\"horizontal\" | \"vertical\" | \"grid\", Layout> = \"vertical\";\n\n  /**\n   * Indicates number of columns.\n   */\n  @Prop({ reflect: true }) columns: Columns;\n\n  /**\n   * When `true`, the `calcite-action-menu` is open.\n   */\n  @Prop({ reflect: true, mutable: true }) menuOpen = false;\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * Specifies the size of the `calcite-action-menu`.\n   */\n  @Prop({ reflect: true }) scale: Scale;\n\n  /**\n   * Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available.\n   */\n  @Prop() menuFlipPlacements: FlipPlacement[];\n\n  /**\n   * Determines where the action menu will be positioned.\n   */\n  @Prop({ reflect: true }) menuPlacement: LogicalPlacement;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ActionGroupMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ActionGroupMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n  @Element() el: HTMLCalciteActionGroupElement;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: ActionGroupMessages;\n\n  @State() hasMenuActions = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component's first focusable element. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.el.focus();\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n    connectConditionalSlotComponent(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectConditionalSlotComponent(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Component Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderMenu(): VNode {\n    const {\n      expanded,\n      menuOpen,\n      scale,\n      layout,\n      messages,\n      overlayPositioning,\n      hasMenuActions,\n      menuFlipPlacements,\n      menuPlacement,\n    } = this;\n\n    return (\n      <calcite-action-menu\n        expanded={expanded}\n        flipPlacements={\n          menuFlipPlacements ?? (layout === \"horizontal\" ? [\"top\", \"bottom\"] : [\"left\", \"right\"])\n        }\n        hidden={!hasMenuActions}\n        label={messages.more}\n        onCalciteActionMenuOpen={this.setMenuOpen}\n        open={menuOpen}\n        overlayPositioning={overlayPositioning}\n        placement={menuPlacement ?? (layout === \"horizontal\" ? \"bottom-start\" : \"leading-start\")}\n        scale={scale}\n      >\n        <calcite-action\n          icon={ICONS.menu}\n          scale={scale}\n          slot={ACTION_MENU_SLOTS.trigger}\n          text={messages.more}\n          textEnabled={expanded}\n        />\n        <slot name={SLOTS.menuActions} onSlotchange={this.handleMenuActionsSlotChange} />\n        <slot name={SLOTS.menuTooltip} slot={ACTION_MENU_SLOTS.tooltip} />\n      </calcite-action-menu>\n    );\n  }\n\n  render(): VNode {\n    return (\n      <div aria-label={this.label} class={CSS.container} role=\"group\">\n        <slot />\n        {this.renderMenu()}\n      </div>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  setMenuOpen = (event: CalciteActionMenuCustomEvent<void>): void => {\n    this.menuOpen = !!event.target.open;\n  };\n\n  handleMenuActionsSlotChange = (event: Event): void => {\n    this.hasMenuActions = slotChangeHasAssignedElement(event);\n  };\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-action-background-color: Specifies the component's background color.\n * @prop --calcite-action-group-border-color: Specifies the component's border color when used in a `calcite-action-bar` or `calcite-action-menu`.\n * @prop --calcite-action-group-columns: When `layout` is `\"grid\"`, specifies the component's grid-template-columns.\n * @prop --calcite-action-group-gap: When `layout` is `\"grid\"`, specifies the component's gap.\n * @prop --calcite-action-group-padding: [Deprecated] Use `--calcite-action-group-gap`. Specifies the component's padding.\n *\n */\n\n:host {\n  @extend %component-host;\n\n  @apply flex\n  flex-col\n  p-0;\n\n  background-color: transparent;\n  border-color: var(--calcite-action-group-border-color, var(--calcite-color-border-3));\n  border-style: solid;\n  border-width: 0;\n}\n\n.container {\n  @apply flex flex-col flex-grow;\n}\n\n:host([columns=\"1\"]) {\n  --calcite-internal-action-group-columns: 1;\n}\n:host([columns=\"2\"]) {\n  --calcite-internal-action-group-columns: 2;\n}\n:host([columns=\"3\"]) {\n  --calcite-internal-action-group-columns: 3;\n}\n:host([columns=\"4\"]) {\n  --calcite-internal-action-group-columns: 4;\n}\n:host([columns=\"5\"]) {\n  --calcite-internal-action-group-columns: 5;\n}\n:host([columns=\"6\"]) {\n  --calcite-internal-action-group-columns: 6;\n}\n\n:host(:first-child) {\n  @apply pt-0;\n}\n\n:host([layout=\"horizontal\"]),\n:host([layout=\"horizontal\"]) .container {\n  @apply flex-row;\n}\n\n:host([layout=\"grid\"]) {\n  @apply grid;\n\n  .container {\n    @apply grid\n    place-content-stretch;\n    background-color: transparent;\n    grid-template-columns: repeat(\n      var(--calcite-action-group-columns, var(--calcite-internal-action-group-columns, 3)),\n      auto\n    );\n    gap: var(--calcite-action-group-gap, 1px);\n    padding: var(--calcite-action-group-gap, 1px);\n  }\n}\n\n@include base-component();\n","export function getRoundRobinIndex(index: number, total: number): number {\n  return (index + total) % total;\n}\n","export const CSS = {\n  menu: \"menu\",\n  defaultTrigger: \"default-trigger\",\n};\n\nexport const SLOTS = {\n  tooltip: \"tooltip\",\n  trigger: \"trigger\",\n};\n\nexport const ICONS = {\n  menu: \"ellipsis\",\n} as const;\n\nexport const activeAttr = \"data-active\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from \"@stencil/core\";\nimport { Fragment, VNode } from \"@stencil/core/internal\";\nimport { getRoundRobinIndex } from \"../../utils/array\";\nimport { focusElement, toAriaBoolean } from \"../../utils/dom\";\nimport { FlipPlacement, LogicalPlacement, OverlayPositioning } from \"../../utils/floating-ui\";\nimport { guid } from \"../../utils/guid\";\nimport { isActivationKey } from \"../../utils/key\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { Appearance, Scale } from \"../interfaces\";\nimport { activeAttr, CSS, ICONS, SLOTS } from \"./resources\";\n\nconst SUPPORTED_MENU_NAV_KEYS = [\"ArrowUp\", \"ArrowDown\", \"End\", \"Home\"];\n\n/**\n * @slot - A slot for adding `calcite-action`s.\n * @slot trigger - A slot for adding a `calcite-action` to trigger opening the menu.\n * @slot tooltip - A slot for adding an tooltip for the menu.\n */\n@Component({\n  tag: \"calcite-action-menu\",\n  styleUrl: \"action-menu.scss\",\n  shadow: true,\n})\nexport class ActionMenu implements LoadableComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.connectMenuButtonEl();\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    this.disconnectMenuButtonEl();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Specifies the appearance of the component. */\n  @Prop({ reflect: true }) appearance: Extract<\"solid\" | \"transparent\", Appearance> = \"solid\";\n\n  /**\n   * When `true`, the component is expanded.\n   */\n  @Prop({ reflect: true }) expanded = false;\n\n  @Watch(\"expanded\")\n  expandedHandler(): void {\n    this.open = false;\n    this.setTooltipReferenceElement();\n  }\n\n  /**\n   * Specifies the component's fallback slotted content `placement` when it's initial or specified `placement` has insufficient space available.\n   */\n  @Prop() flipPlacements: FlipPlacement[];\n\n  /**\n   *  Specifies the text string for the component.\n   */\n  @Prop() label!: string;\n\n  /**\n   * When `true`, the component is open.\n   */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(open: boolean): void {\n    this.activeMenuItemIndex = this.open ? 0 : -1;\n    if (this.menuButtonEl) {\n      this.menuButtonEl.active = open;\n    }\n    this.calciteActionMenuOpen.emit();\n\n    this.setTooltipReferenceElement();\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * Determines where the component will be positioned relative to the `referenceElement`.\n   */\n  @Prop({ reflect: true }) placement: LogicalPlacement = \"auto\";\n\n  /**\n   * Specifies the size of the component's trigger `calcite-action`.\n   */\n  @Prop({ reflect: true }) scale: Scale;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires when the `open` property is toggled.\n   *\n   */\n  @Event({ cancelable: false }) calciteActionMenuOpen: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteActionMenuElement;\n\n  @State() menuButtonEl: HTMLCalciteActionElement;\n\n  slottedMenuButtonEl: HTMLCalciteActionElement;\n\n  defaultMenuButtonEl: HTMLCalciteActionElement;\n\n  actionElements: HTMLCalciteActionElement[] = [];\n\n  guid = `calcite-action-menu-${guid()}`;\n\n  menuId = `${this.guid}-menu`;\n\n  menuButtonId = `${this.guid}-menu-button`;\n\n  tooltipEl: HTMLCalciteTooltipElement;\n\n  @State() activeMenuItemIndex = -1;\n\n  @Watch(\"activeMenuItemIndex\")\n  activeMenuItemIndexHandler(): void {\n    this.updateActions(this.actionElements);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    return focusElement(this.menuButtonEl);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Component Methods\n  //\n  // --------------------------------------------------------------------------\n\n  connectMenuButtonEl = (): void => {\n    const { menuButtonId, menuId, open, label } = this;\n    const menuButtonEl = this.slottedMenuButtonEl || this.defaultMenuButtonEl;\n\n    if (this.menuButtonEl === menuButtonEl) {\n      return;\n    }\n\n    this.disconnectMenuButtonEl();\n\n    this.menuButtonEl = menuButtonEl;\n\n    this.setTooltipReferenceElement();\n\n    if (!menuButtonEl) {\n      return;\n    }\n\n    menuButtonEl.active = open;\n    menuButtonEl.setAttribute(\"aria-controls\", menuId);\n    menuButtonEl.setAttribute(\"aria-expanded\", toAriaBoolean(open));\n    menuButtonEl.setAttribute(\"aria-haspopup\", \"true\");\n\n    if (!menuButtonEl.id) {\n      menuButtonEl.id = menuButtonId;\n    }\n\n    if (!menuButtonEl.label) {\n      menuButtonEl.label = label;\n    }\n\n    if (!menuButtonEl.text) {\n      menuButtonEl.text = label;\n    }\n\n    menuButtonEl.addEventListener(\"click\", this.menuButtonClick);\n    menuButtonEl.addEventListener(\"keydown\", this.menuButtonKeyDown);\n  };\n\n  disconnectMenuButtonEl = (): void => {\n    const { menuButtonEl } = this;\n\n    if (!menuButtonEl) {\n      return;\n    }\n\n    menuButtonEl.removeEventListener(\"click\", this.menuButtonClick);\n    menuButtonEl.removeEventListener(\"keydown\", this.menuButtonKeyDown);\n  };\n\n  setMenuButtonEl = (event: Event): void => {\n    const actions = (event.target as HTMLSlotElement)\n      .assignedElements({\n        flatten: true,\n      })\n      .filter((el): el is HTMLCalciteActionElement => el?.matches(\"calcite-action\"));\n\n    this.slottedMenuButtonEl = actions[0];\n    this.connectMenuButtonEl();\n  };\n\n  setDefaultMenuButtonEl = (el: HTMLCalciteActionElement): void => {\n    this.defaultMenuButtonEl = el;\n    this.connectMenuButtonEl();\n  };\n\n  renderMenuButton(): VNode {\n    const { appearance, label, scale, expanded } = this;\n\n    const menuButtonSlot = (\n      <slot name={SLOTS.trigger} onSlotchange={this.setMenuButtonEl}>\n        <calcite-action\n          appearance={appearance}\n          class={CSS.defaultTrigger}\n          icon={ICONS.menu}\n          ref={this.setDefaultMenuButtonEl}\n          scale={scale}\n          text={label}\n          textEnabled={expanded}\n        />\n      </slot>\n    );\n\n    return menuButtonSlot;\n  }\n\n  renderMenuItems(): VNode {\n    const {\n      actionElements,\n      activeMenuItemIndex,\n      open,\n      menuId,\n      menuButtonEl,\n      label,\n      placement,\n      overlayPositioning,\n      flipPlacements,\n    } = this;\n\n    const activeAction = actionElements[activeMenuItemIndex];\n    const activeDescendantId = activeAction?.id || null;\n\n    return (\n      <calcite-popover\n        autoClose={true}\n        flipPlacements={flipPlacements}\n        focusTrapDisabled={true}\n        label={label}\n        offsetDistance={0}\n        onCalcitePopoverClose={this.handlePopoverClose}\n        onCalcitePopoverOpen={this.handlePopoverOpen}\n        open={open}\n        overlayPositioning={overlayPositioning}\n        placement={placement}\n        pointerDisabled={true}\n        referenceElement={menuButtonEl}\n      >\n        <div\n          aria-activedescendant={activeDescendantId}\n          aria-labelledby={menuButtonEl?.id}\n          class={CSS.menu}\n          id={menuId}\n          onClick={this.handleCalciteActionClick}\n          role=\"menu\"\n          tabIndex={-1}\n        >\n          <slot onSlotchange={this.handleDefaultSlotChange} />\n        </div>\n      </calcite-popover>\n    );\n  }\n\n  render(): VNode {\n    return (\n      <Fragment>\n        {this.renderMenuButton()}\n        {this.renderMenuItems()}\n        <slot name={SLOTS.tooltip} onSlotchange={this.updateTooltip} />\n      </Fragment>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  handleCalciteActionClick = (): void => {\n    this.open = false;\n    this.setFocus();\n  };\n\n  private menuButtonClick = (): void => {\n    this.toggleOpen();\n  };\n\n  updateTooltip = (event: Event): void => {\n    const tooltips = (event.target as HTMLSlotElement)\n      .assignedElements({\n        flatten: true,\n      })\n      .filter((el): el is HTMLCalciteTooltipElement => el?.matches(\"calcite-tooltip\"));\n\n    this.tooltipEl = tooltips[0];\n    this.setTooltipReferenceElement();\n  };\n\n  setTooltipReferenceElement = (): void => {\n    const { tooltipEl, expanded, menuButtonEl, open } = this;\n\n    if (tooltipEl) {\n      tooltipEl.referenceElement = !expanded && !open ? menuButtonEl : null;\n    }\n  };\n\n  updateAction = (action: HTMLCalciteActionElement, index: number): void => {\n    const { guid, activeMenuItemIndex } = this;\n    const id = `${guid}-action-${index}`;\n\n    action.tabIndex = -1;\n    action.setAttribute(\"role\", \"menuitem\");\n\n    if (!action.id) {\n      action.id = id;\n    }\n\n    // data attribute is used to style the \"activeMenuItemIndex\" action using token focus styling.\n    action.toggleAttribute(activeAttr, index === activeMenuItemIndex);\n  };\n\n  updateActions = (actions: HTMLCalciteActionElement[]): void => {\n    actions?.forEach(this.updateAction);\n  };\n\n  handleDefaultSlotChange = (event: Event): void => {\n    const actions = (event.target as HTMLSlotElement)\n      .assignedElements({\n        flatten: true,\n      })\n      .reduce<HTMLCalciteActionElement[]>((previousValue, currentValue) => {\n        if (currentValue?.matches(\"calcite-action\")) {\n          previousValue.push(currentValue as HTMLCalciteActionElement);\n          return previousValue;\n        }\n\n        if (currentValue?.matches(\"calcite-action-group\")) {\n          return previousValue.concat(Array.from(currentValue.querySelectorAll(\"calcite-action\")));\n        }\n\n        return previousValue;\n      }, []);\n\n    this.actionElements = actions.filter((action) => !action.disabled && !action.hidden);\n  };\n\n  isValidKey(key: string, supportedKeys: string[]): boolean {\n    return !!supportedKeys.find((k) => k === key);\n  }\n\n  menuButtonKeyDown = (event: KeyboardEvent): void => {\n    const { key } = event;\n    const { actionElements, activeMenuItemIndex, open } = this;\n\n    if (!actionElements.length) {\n      return;\n    }\n\n    if (isActivationKey(key)) {\n      event.preventDefault();\n\n      if (!open) {\n        this.toggleOpen();\n        return;\n      }\n\n      const action = actionElements[activeMenuItemIndex];\n      action ? action.click() : this.toggleOpen(false);\n    }\n\n    if (key === \"Tab\") {\n      this.open = false;\n      return;\n    }\n\n    if (key === \"Escape\") {\n      this.toggleOpen(false);\n      event.preventDefault();\n      return;\n    }\n\n    this.handleActionNavigation(event, key, actionElements);\n  };\n\n  handleActionNavigation = (\n    event: KeyboardEvent,\n    key: string,\n    actions: HTMLCalciteActionElement[],\n  ): void => {\n    if (!this.isValidKey(key, SUPPORTED_MENU_NAV_KEYS)) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (!this.open) {\n      this.toggleOpen();\n\n      if (key === \"Home\" || key === \"ArrowDown\") {\n        this.activeMenuItemIndex = 0;\n      }\n\n      if (key === \"End\" || key === \"ArrowUp\") {\n        this.activeMenuItemIndex = actions.length - 1;\n      }\n\n      return;\n    }\n\n    if (key === \"Home\") {\n      this.activeMenuItemIndex = 0;\n    }\n\n    if (key === \"End\") {\n      this.activeMenuItemIndex = actions.length - 1;\n    }\n\n    const currentIndex = this.activeMenuItemIndex;\n\n    if (key === \"ArrowUp\") {\n      this.activeMenuItemIndex = getRoundRobinIndex(Math.max(currentIndex - 1, -1), actions.length);\n    }\n\n    if (key === \"ArrowDown\") {\n      this.activeMenuItemIndex = getRoundRobinIndex(currentIndex + 1, actions.length);\n    }\n  };\n\n  toggleOpenEnd = (): void => {\n    this.setFocus();\n    this.el.removeEventListener(\"calcitePopoverOpen\", this.toggleOpenEnd);\n  };\n\n  toggleOpen = (value = !this.open): void => {\n    this.el.addEventListener(\"calcitePopoverOpen\", this.toggleOpenEnd);\n    this.open = value;\n  };\n\n  private handlePopoverOpen = (): void => {\n    this.open = true;\n  };\n\n  private handlePopoverClose = (): void => {\n    this.open = false;\n  };\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-action-menu-items-space: Specifies the space between actions in the menu.\n *\n */\n\n:host {\n  @apply text-1\n  box-border\n  flex\n  flex-col;\n}\n\n::slotted(calcite-action-group:not(:last-of-type)) {\n  border-block-end-width: var(--calcite-border-width-sm);\n}\n\n.default-trigger {\n  @apply relative\n  h-full\n  flex-initial\n  self-stretch;\n}\n\n@include slotted(\"trigger\", \"calcite-action\") {\n  @apply relative\n  h-full\n  flex-initial\n  self-stretch;\n}\n\n.menu {\n  @apply flex\n  flex-col\n  flex-nowrap\n  outline-none\n  overflow-y-auto\n  overflow-x-hidden\n  max-h-menu;\n  gap: var(--calcite-action-menu-items-space, 0);\n}\n\n@include base-component();\n","import { forceUpdate } from \"@stencil/core\";\nimport { createObserver, ExtendedMutationObserver } from \"./observers\";\n\n/**\n * Defines interface for components with a dynamically changing slot.\n *\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport interface ConditionalSlotComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n}\n\nlet mutationObserver: ExtendedMutationObserver;\nconst observerOptions: Pick<Parameters<MutationObserver[\"observe\"]>[1], \"childList\"> = { childList: true };\n\n/**\n * Helper to set up a conditional slot component on connectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function connectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  if (!mutationObserver) {\n    mutationObserver = createObserver(\"mutation\", processMutations);\n  }\n\n  mutationObserver.observe(component.el, observerOptions);\n}\n\n/**\n * Helper to tear down a conditional slot component on disconnectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function disconnectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  mutationObserver.unobserve(component.el);\n}\n\nfunction processMutations(mutations: MutationRecord[]): void {\n  mutations.forEach(({ target }) => {\n    forceUpdate(target);\n  });\n}\n"],"names":["SLOTS","menuActions","menuTooltip","ICONS","CSS","ActionGroup","proxyCustomElement","HTMLElement","setMenuOpen","event","this","menuOpen","target","open","handleMenuActionsSlotChange","hasMenuActions","slotChangeHasAssignedElement","expandedHandler","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","setFocus","componentFocusable","el","focus","connectedCallback","connectLocalized","connectMessages","connectConditionalSlotComponent","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnectConditionalSlotComponent","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","renderMenu","expanded","scale","layout","messages","overlayPositioning","menuFlipPlacements","menuPlacement","h","flipPlacements","hidden","label","more","onCalciteActionMenuOpen","placement","icon","slot","SLOTS$1","trigger","text","textEnabled","name","onSlotchange","tooltip","render","key","class","role","getRoundRobinIndex","index","total","SUPPORTED_MENU_NAV_KEYS","ActionMenu","actionElements","guid","concat","menuId","menuButtonId","connectMenuButtonEl","menuButtonEl","slottedMenuButtonEl","defaultMenuButtonEl","disconnectMenuButtonEl","setTooltipReferenceElement","active","setAttribute","toAriaBoolean","id","addEventListener","menuButtonClick","menuButtonKeyDown","removeEventListener","setMenuButtonEl","actions","assignedElements","flatten","filter","matches","setDefaultMenuButtonEl","handleCalciteActionClick","toggleOpen","updateTooltip","tooltips","tooltipEl","referenceElement","updateAction","action","activeMenuItemIndex","tabIndex","toggleAttribute","updateActions","forEach","handleDefaultSlotChange","reduce","previousValue","currentValue","push","Array","from","querySelectorAll","disabled","length","isActivationKey","preventDefault","click","handleActionNavigation","isValidKey","currentIndex","Math","max","toggleOpenEnd","value","arguments","undefined","_this","handlePopoverOpen","handlePopoverClose","openHandler","calciteActionMenuOpen","emit","activeMenuItemIndexHandler","focusElement","renderMenuButton","appearance","ref","renderMenuItems","activeAction","activeDescendantId","autoClose","focusTrapDisabled","offsetDistance","onCalcitePopoverClose","onCalcitePopoverOpen","pointerDisabled","onClick","Fragment","supportedKeys","find","k","mutationObserver","observerOptions","childList","component","createObserver","processMutations","observe","unobserve","mutations","_ref","forceUpdate"],"sourceRoot":""}